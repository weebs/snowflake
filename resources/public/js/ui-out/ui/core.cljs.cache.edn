;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name ui.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, string clojure.string, clojure.string clojure.string}, :uses {atom reagent.core, split-lines clojure.string}, :defs {shell-result {:name ui.core/shell-result, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 11, :column 1, :end-line 11, :end-column 18, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 11, :column 6, :end-line 11, :end-column 18}}, proc {:name ui.core/proc, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 14, :column 1, :end-line 14, :end-column 14, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 14, :column 10, :end-line 14, :end-column 14}}, append-to-out {:protocol-inline nil, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 23, :column 7, :end-line 23, :end-column 20, :arglists (quote ([out]))}, :name ui.core/append-to-out, :variadic false, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :end-column 20, :method-params ([out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([out]))}, ipc {:name ui.core/ipc, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 16, :column 1, :end-line 16, :end-column 9, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 16, :column 6, :end-line 16, :end-column 9}}, command {:name ui.core/command, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 12, :column 1, :end-line 12, :end-column 17, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 12, :column 10, :end-line 12, :end-column 17}}, state {:name ui.core/state, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 10, :column 1, :end-line 10, :end-column 15, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 10, :column 10, :end-line 10, :end-column 15}}, run-process {:protocol-inline nil, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 29, :column 7, :end-line 29, :end-column 18, :arglists (quote ([]))}, :name ui.core/run-process, :variadic false, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, electron {:name ui.core/electron, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 15, :column 1, :end-line 15, :end-column 14, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 15, :column 6, :end-line 15, :end-column 14}}, join-lines {:name ui.core/join-lines, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 5, :column 1, :end-line 5, :end-column 16, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 5, :column 6, :end-line 5, :end-column 16}}, root-component {:protocol-inline nil, :meta {:file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :line 41, :column 7, :end-line 41, :end-column 21, :arglists (quote ([]))}, :name ui.core/root-component, :variadic false, :file "/Users/dave/scratch/clojure/electron/cljs-electron/ui_src/ui/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:pre :placeholder :button :img.electron :img.cljs :value :div.logos :type :src :on-click :input#command :div :on-submit :img.reagent :form :on-change :p :text}, :order [:div :div.logos :img.electron :src :img.cljs :img.reagent :pre :p :button :on-click :form :on-submit :input#command :type :on-change :value :placeholder :text]}, :doc nil}